openapi: 3.0.0
info:
    title: OpenAI API
    description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
    version: "2.3.0"
    termsOfService: https://openai.com/policies/terms-of-use
    contact:
        name: OpenAI Support
        url: https://help.openai.com/
    license:
        name: MIT
        url: https://github.com/openai/openai-openapi/blob/master/LICENSE
servers:
    - url: https://api.openai.com/v1
paths:
    # Note: When adding an endpoint, make sure you also add it in the `groups` section, in the end of this file,
    # under the appropriate group
    /chat/completions:
        post:
            operationId: createChatCompletion
            tags:
                - Chat
            summary: Creates a model response for the given chat conversation.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateChatCompletionRequest"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CreateChatCompletionResponse"
            security:
              - ApiKeyAuth: []
components:
    securitySchemes:
        ApiKeyAuth:
            type: http
            scheme: "bearer"

    schemas:
        Error:
            type: object
            properties:
                code:
                    type: string
                    nullable: true
                message:
                    type: string
                    nullable: false
                param:
                    type: string
                    nullable: true
                type:
                    type: string
                    nullable: false
            required:
                - type
                - message
                - param
                - code
        ErrorResponse:
            type: object
            properties:
                error:
                    $ref: "#/components/schemas/Error"
            required:
                - error
        ChatCompletionRequestMessage:
            oneOf:
                - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
                - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
            x-oaiExpandable: true
        ChatCompletionRequestSystemMessage:
            type: object
            title: System message
            properties:
                content:
                    description: The contents of the system message.
                    oneOf:
                        - type: string
                          description: The contents of the system message.
                          title: Text content
                role:
                    type: string
                    description: The role of the messages author, in this case `system`.
                name:
                    type: string
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            required:
                - content
                - role
        ChatCompletionRequestUserMessage:
            type: object
            title: User message
            properties:
                content:
                    description: |
                        The contents of the user message.
                    type: string
                    x-oaiExpandable: true
                role:
                    type: string
                    description: The role of the messages author, in this case `user`.
                name:
                    type: string
                    description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            required:
                - content
                - role
        ChatCompletionResponseMessage:
            type: object
            description: A chat completion message generated by the model.
            properties:
                content:
                    type: string
                    description: The contents of the message.
                    nullable: true
                refusal:
                    type: string
                    description: The refusal message generated by the model.
                    nullable: true
                role:
                    type: string
                    enum: ["assistant"]
                    description: The role of the author of this message.
                tool_calls:
                    $ref: "#/components/schemas/ChatCompletionMessageToolCalls"
            required:
                - role
                - content
                - refusal
        CreateChatCompletionRequest:
            type: object
            properties:
                messages:
                    description: A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
                    type: array
                    minItems: 1
                    items:
                        $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
                model:
                    description: ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
                    example: "gpt-4o"
                    type: string
                    x-oaiTypeLabel: string
                frequency_penalty:
                    type: number
                    default: 0
                    minimum: -2
                    maximum: 2
                    nullable: true
                    description: *completions_frequency_penalty_description
                logit_bias:
                    type: object
                    x-oaiTypeLabel: map
                    nullable: true
                    additionalProperties:
                        type: integer
                    description: |
                        Modify the likelihood of specified tokens appearing in the completion.

                        Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
                logprobs:
                    description: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
                    type: boolean
                    default: false
                    nullable: true
                top_logprobs:
                    description: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
                    type: integer
                    minimum: 0
                    maximum: 20
                    nullable: true
                max_tokens:
                    description: |
                        The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.

                        This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
                    type: integer
                    nullable: true
                    deprecated: true
                max_completion_tokens:
                    description: |
                        An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
                    type: integer
                    nullable: true

                n:
                    type: integer
                    minimum: 1
                    maximum: 128
                    default: 1
                    example: 1
                    nullable: true
                    description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
                presence_penalty:
                    type: number
                    default: 0
                    minimum: -2
                    maximum: 2
                    nullable: true
                    description: *completions_presence_penalty_description
                response_format:
                    type: object
                    description: An object specifying the format that the model must output.
                seed:
                    type: integer
                    minimum: -9223372036854775808
                    maximum: 9223372036854775807
                    nullable: true
                    description: |
                        This feature is in Beta.
                        If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
                        Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
                    x-oaiMeta:
                        beta: true
                service_tier:
                  description: |
                      Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
                        - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted. 
                        - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
                        - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
                        - When not set, the default behavior is 'auto'.

                        When this parameter is set, the response body will include the `service_tier` utilized.
                  type: string
                  enum: ["auto", "default"]
                  nullable: true
                stop:
                    description: |
                        Up to 4 sequences where the API will stop generating further tokens.
                    oneOf:
                        - type: string
                          nullable: true
                        - type: array
                          minItems: 1
                          maxItems: 4
                          items:
                              type: string
                stream:
                    description: >
                        If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
                        as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
                    type: boolean
                    nullable: true
                    default: false
                temperature:
                    type: number
                    minimum: 0
                    maximum: 2
                    default: 1
                    example: 1
                    nullable: true
                    description: *completions_temperature_description
                tools:
                    type: array
                    description: >
                        A list of tools the model may call. Currently, only functions are supported as a tool.
                        Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
                    items:
                        $ref: "#/components/schemas/ChatCompletionTool"
                top_p:
                    type: number
                    minimum: 0
                    maximum: 1
                    default: 1
                    example: 1
                    nullable: true
                    description: *completions_top_p_description
            required:
                - model
                - messages
        CreateChatCompletionResponse:
            type: object
            description: Represents a chat completion response returned by model, based on the provided input.
            properties:
                id:
                    type: string
                    description: A unique identifier for the chat completion.
                choices:
                    type: array
                    description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
                    items:
                        type: object
                        required:
                            - finish_reason
                            - index
                            - message
                            - logprobs
                        properties:
                            finish_reason:
                                type: string
                                description: &chat_completion_finish_reason_description |
                                    The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                                    `length` if the maximum number of tokens specified in the request was reached,
                                    `content_filter` if content was omitted due to a flag from our content filters,
                                    `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                                enum:
                                    [
                                        "stop",
                                        "length",
                                        "tool_calls",
                                        "content_filter",
                                        "function_call",
                                    ]
                            index:
                                type: integer
                                description: The index of the choice in the list of choices.
                            message:
                                $ref: "#/components/schemas/ChatCompletionResponseMessage"
                created:
                    type: integer
                    description: The Unix timestamp (in seconds) of when the chat completion was created.
                model:
                    type: string
                    description: The model used for the chat completion.
                service_tier:
                    description: The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
                    type: string
                    enum: ["scale", "default"]
                    example: "scale"
                    nullable: true
                system_fingerprint:
                    type: string
                    description: |
                        This fingerprint represents the backend configuration that the model runs with.

                        Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
                object:
                    type: string
                    description: The object type, which is always `chat.completion`.
                    enum: [chat.completion]
            required:
                - choices
                - created
                - id
                - model
                - object
            x-oaiMeta:
                name: The chat completion object
                group: chat
                example: *chat_completion_example
        ChatCompletionTool:
            type: object
            properties:
                type:
                    type: string
                    enum: ["function"]
                    description: The type of the tool. Currently, only `function` is supported.
                function:
                    $ref: "#/components/schemas/FunctionObject"
            required:
                - type
                - function
        FunctionObject:
            type: object
            properties:
                description:
                    type: string
                    description: A description of what the function does, used by the model to choose when and how to call the function.
                name:
                    type: string
                    description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                parameters:
                    $ref: "#/components/schemas/FunctionParameters"
                strict:
                  type: boolean
                  nullable: true
                  default: false
                  description: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            required:
                - name
        FunctionParameters:
            type: object
            description: "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
            additionalProperties: true
        ChatCompletionMessageToolCalls:
            type: array
            description: The tool calls generated by the model, such as function calls.
            items:
                $ref: "#/components/schemas/ChatCompletionMessageToolCall"
        ChatCompletionMessageToolCall:
            type: object
            properties:
                # TODO: index included when streaming
                id:
                    type: string
                    description: The ID of the tool call.
                type:
                    type: string
                    enum: ["function"]
                    description: The type of the tool. Currently, only `function` is supported.
                function:
                    type: object
                    description: The function that the model called.
                    properties:
                        name:
                            type: string
                            description: The name of the function to call.
                        arguments:
                            type: string
                            description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                    required:
                        - name
                        - arguments
            required:
                - id
                - type
                - function

